- name: dry-run-vep
  tags:
    - dry-run
    - vep
  command: >
    snakemake
      --dryrun
      --reason
      --printshellcmds
      --config pepfile=tests/pep/samples.csv
      --configfile=tests/data/config.json
      --snakefile vep.smk
  exit_code: 0
  stdout:
    contains:
      - vep
      - SRR8615409/vep.txt.gz
      - SRR8615409/vep.target.txt.gz
      - SRR8615409/vep.target.tsv
    contains_regex:
      # Test default population AF filter value of 1%
      - "vep .* --freq_freq 0.01"

- name: dry-run-vep-population-af
  tags:
    - dry-run
    - vep
  command: >
    snakemake
      --dryrun
      --reason
      --printshellcmds
      --config pepfile=tests/pep/samples.csv max_pop_af=0.42
      --configfile=tests/data/config.json
      --snakefile vep.smk
  stdout:
    contains_regex:
      # Test default filter value of 5%
      - "vep .* --freq_freq 0.42"

- name: dry-run-vanilla
  tags:
    - dry-run
  command: >
    snakemake
      --dryrun
      --reason
      --printshellcmds
      --config pepfile=tests/pep/samples.csv
      --configfile=tests/data/config.json
      --snakefile Snakefile
  exit_code: 0
  stdout:
    contains:
      - vardict-java
      - vardict/SRR8615409.vep.target.tsv
      - "rule vardict_annotate:"
      - "rule vardict_filter_vep:"
      - "rule vardict_vep_table:"

      - "rule varscan_annotate:"
      - "rule varscan_filter_vep:"
      - "rule varscan_vep_table:"

      - "rule split_N_CIGAR:"
      - "rule mutect2:"
      - "rule mutect2_annotate:"
      - "rule mutect2_filter_vep:"
      - "rule mutect2_vep_table:"

      - "rule freebayes:"
      - "rule freebayes_annotate:"
      - "rule freebayes_filter_vep:"
      - "rule freebayes_vep_table:"
    contains_regex:
      - "filter_vep.py .* vardict/SRR8615409.vep.txt"
      - "filter_vep.py .* varscan/SRR8615409.vep.txt"
      - "filter_vep.py .* mutect2/SRR8615409.vep.txt"

# Test that we only run the specified caller(s), in this case vardict
- name: dry-run-single-caller
  tags:
    - dry-run
  command: >
    snakemake
      --dryrun
      --reason
      --printshellcmds
      --config pepfile=tests/pep/samples.csv
      --configfile=tests/data/config-single-caller.json
      --snakefile Snakefile
  exit_code: 0
  stdout:
    contains:
      - vardict-java
      - vardict/SRR8615409.vep.target.tsv
      - "rule vardict_annotate:"
      - "rule vardict_filter_vep:"
      - "rule vardict_vep_table:"

    must_not_contain:
      - "rule varscan_annotate:"
      - "rule varscan_filter_vep:"
      - "rule varscan_vep_table:"

      - "rule split_N_CIGAR:"
      - "rule mutect2:"
      - "rule mutect2_annotate:"
      - "rule mutect2_filter_vep:"
      - "rule mutect2_vep_table:"

      - "rule freebayes:"
      - "rule freebayes_annotate:"
      - "rule freebayes_filter_vep:"
      - "rule freebayes_vep_table:"
    contains_regex:
      - "filter_vep.py .* vardict/SRR8615409.vep.txt"

# Test that we pass the min_af and max_pop_af option to every caller
- name: dry-run-allele-fraction
  tags:
    - dry-run
  command: >
    snakemake
      --dryrun
      --reason
      --printshellcmds
      --config pepfile=tests/pep/samples.csv min_af=0.42 max_pop_af=0.99
      --configfile=tests/data/config.json
      --snakefile Snakefile
  stdout:
    contains_regex:
      # Test for sample allele fraction
      - "vardict-java .* -f 0.42"
      - "varscan mpileup2cns .* --min-var-freq 0.42"
      - "gatk Mutect2 .* --minimum-allele-fraction 0.42"
      - "freebayes .* --min-alternate-fraction 0.42"
      # Test for population allele fraction
      - "vep .* vardict/SRR.* --freq_freq 0.99"
      - "vep .* varscan/SRR.* --freq_freq 0.99"
      - "vep .* mutect2/SRR.* --freq_freq 0.99"
      - "vep .* freebayes/SRR.* --freq_freq 0.99"
